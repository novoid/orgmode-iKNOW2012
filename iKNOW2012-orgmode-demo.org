#+TITLE: 
#+LANGUAGE:  en
#+OPTIONS: H:5 author:nil email:nil creator:nil timestamp:nil skip:nil toc:nil
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LaTeX_CLASS: acm-proc-article-sp

## FIXXME: do *not* fill out "+TITLE' above!

#+COMMENT: executing this command via C-c C-c generates the PDF output file:
#+BEGIN_SRC sh :exports none
make all
#+END_SRC

#+RESULTS:

# Replace the title and subtitle with your own
#+BEGIN_LaTeX
\title{Reproducible Research with Emacs Org-mode\titlenote{The full source code of this
paper is available on github
\texttt{https://github.com/novoid/orgmode-iKNOW2012}}}
#+END_LaTeX

#+COMMENT: following lines add additional LaTeX command to the TeX preamble:
#+LaTeX_HEADER: \usepackage{csquotes}
#+LaTeX_HEADER: \usepackage[usenames,dvipsnames]{color}
#+LaTeX_HEADER: \newcommand{\todo}[1]{\textcolor{red}{FIXXME:~#1}}
#+LaTeX_HEADER: \newcommand{\myacro}[1]{\textsc{\lowercase{#1}}}

# Note that add-author-record isn't fully correct.  It formats a comma
# separated list, when it should return a list with the final element
# separated by "and".

#+name: author-list
#+header: :var authors=authorlist
#+header: :var add-authors=additional-authors
#+header: :results latex 
#+header: :exports results
#+BEGIN_SRC emacs-lisp
    (defun author-record (r)
      (if (> (length (first r)) 0)
            (format "\\alignauthor\n%s\\titlenote{%s}\\\\
          \\affaddr{%s}\\\\
          \\affaddr{%s}\\\\
          \\affaddr{%s}\\\\
          \\email{%s}" (first r) (second r) (third r) (fourth r) (fifth r)
          (sixth r))
        "\\and")
    )
    
  (defun non-empty (list)
    (let ( (i 0))
    (mapcar #'(lambda (elem)
                (if (> (length (first elem)) 0)
                  (incf i)))
            list)
    i)
  )
    
    (defun add-author-record (r)
      (format "%s (%s, email:
        {\\texttt{%s}})" 
              (first r) (second r) (third r)))
    
    (let ( (i (+ (non-empty (cdr (cdr authors))) (- (length add-authors) 2) ))
           (a (mapcar (lambda (row)
                        (author-record row)) 
                      (cdr (cdr authors))))
           (b (mapcar (lambda (row)
                        (add-author-record row)) 
                      (cdr (cdr add-authors))))
           )
      (concat
       (format "\\numberofauthors{%s}\n\\author{\n" i)
       (mapconcat 'identity a "\n")
       "}"
       (if (> (length add-authors) 0)
           (concat "\n\\additionalauthors{Additional authors: "
                   (mapconcat 'identity b ", ")
                   ".}")
         ())))
          
#+END_SRC

\maketitle


#+BEGIN_abstract
One important aspect of open science is the ability to reproduce
results using the published data set. For this purpose it is crucial
to use similar methods and tools as the original author producing the
same result set. Reproducible research is a movement that tries to
bridge this gap: within one single set of data one can not only find
the raw data but also the methods and tools to process the data.  The
ultimate discipline is to complete this cycle from the raw data up to
the presentation in the derived paper. Using a simple example this
paper demonstrates how to combine raw data, scripts of various
languages, and the describing text of a paper in one single file.
#+END_abstract

#+name: ACM-categories
#+header: :var c=categories
#+header: :results latex 
#+header: :exports results
#+BEGIN_SRC emacs-lisp
  (defun category-record (r)
    (format "\\category{%s}{%s}{%s}[%s]" 
            (first r) (second r) (third r) (fourth r)))
  (let ( (i (mapcar (lambda (row)
            (category-record row))
          (cdr (cdr c)))))
     (mapconcat 'identity i "\n")
)
#+END_SRC


#+CALL: list-to-cs-string(in-command="terms", in-list=term-list) :results latex :exports results

#+CALL: list-to-cs-string(in-command="keywords", in-list=keyword-list) :results latex :exports results

* Introduction and Related Work

The editor Emacs[fn:emacs] (\cite{Dominik2010}) provides a modular
system that can be extended in various ways. One example of an
extension is the Org-mode[fn:orgmode] which resembles a large set of
features: outlining, task and project management, personal wiki
system, export to a broad variety of formats, integration of external
tools, and much more. Org-mode is portable, available on any important
platform, and Open Source.

Using the Babel subsystem[fn:babel] to integrate external data sources
-- such as source code and execution results from these source code
snippets -- allows for creating meta-documents. This method can be
applied for Literate Programming\cite{Knuth1984} or Reproducible
Research\cite{Delescluse2011, Schulte2011, Schulte2012}.

Reproducible Research can be seen as the ultimate aim of Open
Science[fn:open-science] and Open Data[fn:open-data]. People do not
only get access to the data related to a research paper but also to
the complete process of deriving the paper from the raw data up to the
\myacro{PDF} file of the white paper.

This paper is a short demonstration of the general work flow from the
very easy to write Org-mode text-file -- which contains descriptive
text and processing scripts -- to the final \myacro{PDF} document in
\myacro{ACM} template format[fn:acm-template].

Using a real world example, this paper develops a data processing path
starting from raw data within comma-separated values (\myacro{CSV})
files up to visualizing plots. Different computer languages are part
of this process: command line scripting tools, Python[fn:python], and
R[fn:r-lang]. 

Data is generated or processed using one computer language whose
results are transferred to the next one which might be a different
programming language from the previous. With this technique, it is
possible to process the data with the most suitable command language
appropriate for this single processing step. This is Literate
Programming using multiple programming languages in linear sequence.

[fn:emacs] http://www.gnu.org/software/emacs/
[fn:orgmode] http://orgmode.org
[fn:babel] http://orgmode.org/worg/org-contrib/babel/intro.html
[fn:open-science] http://en.wikipedia.org/wiki/Open\_science
[fn:open-data] http://en.wikipedia.org/wiki/Open\_data
[fn:acm-template] http://www.acm.org/sigs/publications/proceedings-templates
[fn:python] Programming language, http://www.python.org
[fn:r-lang] Statistical software, http://www.r-project.org

* Document Generation Workflow

In order to use Org-mode to generate a \myacro{PDF} file (similar to
this paper) the user has to follow two steps:

1. Write the paper in Emacs Org-mode
   - much simpler syntax and complexity compared to \LaTeX{} command set
   - easy outlining with hiding of sections
   - easy integration of external programming languages, commands,
     and their output
   - everything in one single text file (optional)
   - readable with any text editor or text viewer
2. Export to \LaTeX{}/PDF
   - a single command[fn:export], directly invoked within Emacs (or for
     example \myacro{GNU} make)

The \TeX{} file is only \emph{one} export file format of a larger
number of possible output formats such as OpenDocument Text, DocBook,
\myacro{HTML}, and so forth. Using this Org-mode template, the \LaTeX{}
export function automatically generates a \LaTeX{} file and a
\myacro{PDF} file which follows the \myacro{ACM} format.

This process simplifies the generation of white papers and enables
others to completely re-produce any result mentioned in the paper. No
other artifacts than this /single Org-mode file/ (and external
\myacro{CSV} files if used) are necessary to generate everything from
scratch. And this resembles one of the most important advantages of
the method presented here: a consistent, complete, and easy to
re-generate form of the whole research contribution from raw data
files up to the \myacro{PDF} paper result.

[fn:export] Usually \texttt{org-export-as-pdf} is mapped to
\texttt{C-c C-e p}. However this paper is generated using a
\myacro{GNU} make file in order to automate the whole process without
having to modify the user configuration files. The command to generate
this paper is \texttt{make all} and is invoked from command line.

* Short Syntax Comparison

The \LaTeX{} markup language is complex in terms of
\enquote{characters to type that are not visible in the result}.  The
syntax of Org-mode is much more simpler, comparable to the reduced
syntax languages of Wiki[fn:wiki-url] systems. Therefore the Org-mode
syntax is a lightweight markup language[fn:markup-lang].

The following syntax example in both syntax languages demonstrates
some aspects that make the difference syntax complexity obvious:

#+BEGIN_EXAMPLE
\begin{itemize}
\item First item including a \texttt{filename.txt}.
\item Second line with an 
  \href{http://orgmodeorg}{URL of Org-mode}
\item An URL alone is even simpler: 
  \url{http://tagtore.org}
  \begin{enumerate}
  \item indented enumerated list.
  \item This one contains \emph{emphasized} and 
    \textbf{bold} words.
  \end{enumerate}
\end{itemize}

The next part consists of a source 
code\footnote{Using the \texttt{listings} 
  package.} example:

\begin{lstlisting}[language=Python]
def hello_world():
    print "Hello World"
  
hello_world()
\end{lstlisting}

\begin{table}[ht]
  \centering
  \begin{tabular}{lr}
    \textbf{Input} & \textbf{Speed [s]} \\ \hline
    high dataset   & 4.1                \\
    low dataset    & 1.7
  \end{tabular}
  \caption{Performance results of the code.}
  \label{tab:results}
\end{table}
#+END_EXAMPLE

The very same content from above using Org-mode markup syntax looks
like following lines:

#+BEGIN_EXAMPLE
- First item including a ~filename.txt~.
- Second line with 
  an [[http://orgmodeorg][URL of Org-mode]]
- An URL alone is even simpler: http://tagtore.org
  1. indented enumerated list.
  2. This one contains /emphasized/ and 
     *bold* words.

The next part consists of a source 
code[fn:lst] example:

#+BEGIN_SRC python :exports code
def hello_world():
    print "Hello World"
  
hello_world()
#+END_SRC

#+CAPTION: Performance results of the code.
#+LABEL:   tab:results
| *Input*        | *Speed [s]* |
|----------------+-------------|
| high dataset   | 4.1         |
| low dataset    | 1.7         |

[fn:lst] Using the ~listings~ package.
#+END_EXAMPLE

When Org-mode exports this code to \myacro{PDF} using \LaTeX{} the
results looks like this:

- First item including a ~filename.txt~.
- Second line with 
  an [[http://orgmodeorg][URL of Org-mode]]
- An URL alone is even simpler: http://tagtore.org
  1. indented enumerated list.
  2. This one contains /emphasized/ and 
     *bold* words.

The next part consists of a source 
code[fn:lst] example:

#+BEGIN_SRC python :exports code
def hello_world():
    print "Hello World"
  
hello_world()
#+END_SRC

#+CAPTION: Performance results of the code.
#+LABEL:   tab:results
| *Input*      | *Speed [s]* |
|--------------+-------------|
| high dataset |         4.1 |
| low dataset  |         1.7 |

The simpler Org-mode syntax enables researchers to concentrate on the
content without being distracted by expressing the form. If the user
wants to use \LaTeX{} commands that do not have an equivalent in
Org-mode syntax, she can type in \LaTeX{} commands directly in the
Org-mode file as well: the Org-mode exporter for \LaTeX{} will pass
those commands through.

[fn:lst] Using the ~listings~ package.
[fn:wiki-url] http://en.wikipedia.org/wiki/Wiki
[fn:markup-lang] http://en.wikipedia.org/wiki/Lightweight_markup_language

* Example Evaluation

So far the basic idea was described in previous sections. In this
section, real-world data is used to produce a short research
evaluation example.

In \cite{Voit2011} the authors describe a formal experiment conducted
with 18 test persons in the field of information retrieval. The
original data set is available
online[fn:fe1-github].

We are using this public available data set in the following sections
to demonstrate the analysis and visualization of the research
question: to what extent differs the test persons average re-find task
times within the usual folder hierarchy from average re-find task
times using the newly proposed research software called
\emph{tagstore} [fn:tagstore-url] (see also \cite{Voit2012a}).

[fn:fe1-github] https://github.com/novoid/2011-01-tagstore-formal-experiment
[fn:tagstore-url] http://tagstore.org

** Reading in Data from Files

The analysis starts with reading in raw data from external files. In
this first external \myacro{CSV} file, the re-finding performance of
all test persons is stored. Since we are only interested in the task
times, we want to filter out all other values that are irrelevant for
this analysis. We are using \myacro{GNU} shell commands and tools to
accomplish this task.

The following shell commands 
\begin{enumerate}
\item reads in data from a \myacro{CSV} file,
\item removes all values before the character ";" (thus removing all values
related to number of mouse clicks), 
\item removes all incomplete lines (containing the string
\enquote{TC}), 
\item and removes the header line as well (using the \texttt{tail}
command).
\end{enumerate}

#+NAME: TS-time-per-task
#+BEGIN_SRC sh :exports both
sed 's/.*;//' refinding_tagstore.csv | \
   grep -v "TC" | \
   tail -n +2
#+END_SRC 

#+RESULTS: TS-time-per-task
|  5.7 |  3.8 |  4.3 |  2.4 |  4.3 | 3.2 |
|  6.0 |  2.9 |  4.3 |  4.6 |  4.4 | 3.3 |
|  5.4 |  3.2 |  6.1 |  6.5 |  5.7 | 4.4 |
|  4.3 | 15.7 |  6.2 |  4.9 |  3.1 | 3.0 |
|  9.7 |  3.7 |  3.0 |  3.9 |  2.7 | 8.6 |
| 21.8 |  2.6 | 11.4 |  3.0 | 17.1 | 5.7 |
|  6.6 |  5.6 |  5.0 |  4.1 |  4.5 | 2.0 |
|  7.0 |  2.6 | 10.0 |  3.7 |  9.5 | 3.0 |
|  4.8 |  2.5 |  4.3 |  2.3 |  1.8 | 3.9 |
|  2.4 |  2.7 |  7.1 |  6.2 |  3.8 | 5.1 |
|  3.7 |  3.9 |  7.4 |  2.0 |  3.1 | 7.2 |
|  5.5 |  5.5 |  8.3 | 11.4 |  3.2 | 7.6 |
| 28.3 |  4.0 |  3.9 |  2.0 |  2.4 | 4.3 |
|  5.0 |  5.6 |  6.0 | 14.2 |  2.0 | 6.6 |
|  6.7 |  5.6 |  7.2 | 12.3 |  5.1 | 6.6 |

The table above resembles the direct output of the command provided
above. Using Org-mode the user can decide, if the commands, or the
output, or both gets printed in the exported file. 

** Generating Mean Values

Now that we have the raw task times of the test persons for the
\emph{tagstore} condition, we do want to derive the arithmetic mean
values for further processing.

In the next step, the mean values will be calculated using the
programming language \emph{Python}. We take the result data from the
last command from the previous section and use it as input data for
the following source code snippet:

#+NAME: calculate-TS-mean-values
#+BEGIN_SRC python :var mytable=TS-time-per-task :exports code
import numpy
return [round(numpy.average(row),2) for row in mytable]
#+END_SRC

#+RESULTS: calculate-TS-mean-values
| 3.95 | 4.25 | 5.22 | 6.2 | 5.27 | 10.27 | 4.63 | 5.97 | 3.27 | 4.55 | 4.55 | 6.92 | 7.48 | 6.57 | 7.25 |

This time, the output list consisting of 15 mean values is being
suppressed for layout purposes.

** Sorting Values

To demonstrate the combination of different command languages, we are
now using \myacro{GNU} \emph{tr} and \emph{sort} to transform the list of mean
values in a column format of mean values and sort it reverse
numerical:

#+NAME: TS-sort-mean-values
#+BEGIN_SRC sh :var myvalues=calculate-TS-mean-values :exports code
echo ${myvalues} | tr ' ' '\n' | sort -nr
#+END_SRC

#+RESULTS: TS-sort-mean-values
| 10.27 |
|  7.48 |
|  7.25 |
|  6.92 |
|  6.57 |
|   6.2 |
|  5.97 |
|  5.27 |
|  5.22 |
|  4.63 |
|  4.55 |
|  4.55 |
|  4.25 |
|  3.95 |
|  3.27 |

We get the sorted list of mean values of the task times for all test
persons in the \emph{tagstore} condition.

** Process Folder Values

In this section we repeat the previous steps with the task data
for the second test condition, the folder condition.

#+NAME: F-time-per-task
#+BEGIN_SRC sh :exports both
sed 's/.*;//' refinding_folders.csv | \
   grep -v "TC" | \
   tail -n +2
#+END_SRC 

#+RESULTS: F-time-per-task
|  6.7 | 5.4 |  2.4 |  3.9 | 3.6 | 3.8 |
|  5.4 | 3.1 |  3.4 |  3.5 | 3.3 | 3.6 |
|  6.5 | 6.6 |  4.0 |  4.4 | 4.0 | 5.1 |
|  3.0 | 3.3 |  3.7 |  7.1 | 2.8 | 4.3 |
|  6.6 | 3.6 | 10.3 |  4.6 | 5.4 | 3.7 |
|  2.7 | 3.2 |  9.4 | 18.0 | 4.7 | 3.8 |
|  7.0 | 3.7 |  8.1 |  4.9 | 5.2 | 5.2 |
| 34.1 | 2.8 |  8.9 |  8.9 | 3.1 | 8.3 |
|  4.0 | 2.9 |  3.6 |  5.7 | 5.0 | 5.5 |
|  4.8 | 1.4 |  3.5 |  3.5 | 3.3 | 1.9 |
| 42.9 | 1.9 | 12.3 |  5.8 | 7.6 | 3.4 |
|  7.0 | 5.2 |  5.0 |  3.8 | 5.1 | 4.2 |
| 19.3 | 1.6 | 11.9 |  7.0 | 3.9 | 4.0 |
|  6.6 | 6.6 |  4.6 |  7.5 | 3.8 | 5.2 |
|  6.0 | 3.2 |  5.1 |  4.4 | 5.9 | 4.0 |
|  4.6 | 1.6 |  3.4 |  4.1 | 4.4 | 3.8 |
|  7.1 | 4.5 |  7.0 |  7.6 | 5.5 | 7.5 |

#+NAME: calculate-F-mean-values
#+BEGIN_SRC python :var mytable=F-time-per-task :exports code
import numpy
return [round(numpy.average(row),2) for row in mytable]
#+END_SRC

#+RESULTS: calculate-F-mean-values
| 4.3 | 3.72 | 5.1 | 4.03 | 5.7 | 6.97 | 5.68 | 11.02 | 4.45 | 3.07 | 12.32 | 5.05 | 7.95 | 5.72 | 4.77 | 3.65 | 6.53 |

#+NAME: F-sort-mean-values
#+BEGIN_SRC sh :var myvalues=calculate-F-mean-values :exports code
echo ${myvalues} | tr ' ' '\n' | sort -nr
#+END_SRC

#+RESULTS: F-sort-mean-values
| 12.32 |
| 11.02 |
|  7.95 |
|  6.97 |
|  6.53 |
|  5.72 |
|   5.7 |
|  5.68 |
|   5.1 |
|  5.05 |
|  4.77 |
|  4.45 |
|   4.3 |
|  4.03 |
|  3.72 |
|  3.65 |
|  3.07 |

We do now have the second list of average task times which relates to
the folder condition of the formal experiment.
  
** Plotting Data

The open source statistical software R offers many different kind of
commands to process data.  To visualize the two sets of data using a
boxplot graph, we are using the following R script:

#+NAME: boxplot-data
#+BEGIN_SRC R :var TSdata=TS-sort-mean-values :var Fdata=F-sort-mean-values :exports code :results none
png('my_boxplot_data.png')
## following two commands compensate a bug
## in the Babel method which should be fixed soon:
mFdata=c(4.3, 3.72, 5.1, 4.03, 5.7, 6.97, 5.68, 
         11.02, 4.45, 3.07, 12.32, 5.05, 7.95, 
         5.72, 4.77, 3.65, 6.53)
mTSdata=c(3.95, 4.25, 5.22, 6.2, 5.27, 10.27, 
          4.63, 5.97, 3.27, 4.55, 4.55, 6.92, 
          7.48, 6.57, 7.25)
boxplot(list(mTSdata, mFdata), 
    names=c("tagstore", "folders"), 
    xlab="Task Times", ylab="Seconds", 
    pars = list(boxwex = 0.3, staplewex = 0.5, 
    boxfill="lightblue"))
#+END_SRC

#+RESULTS: boxplot-data

#+LABEL: fig:boxplots
#+CAPTION: Comparison of the two task conditions for re-finding: tagstore and folders. There is no significant difference between the two conditions.
#+ATTR_LaTeX: width=0.5\textwidth
[[file:my_boxplot_data.png]]

The resulting graph visualizes the overall result of the two test
conditions in form of a boxplot[fn:boxplot]: the average task times in
the \emph{tagstore} condition and the folders condition.

Every single step from the raw data from the \myacro{CSV} file to the
graph can be completely checked and re-created by anybody who wants to
do so. This method of Reproducible Research guarantees the highest
level of transparency and confirmability.

[fn:boxplot] http://en.wikipedia.org/wiki/Box_plot

* boxplot-test :noexport:

#+NAME: draw-histogram
#+BEGIN_SRC python :var myvalues=TS-sort-mean-values :exports both
import numpy as np
import matplotlib.pyplot as plt

#n, bins, patches = plt.hist(myvalues, histtype="bar")
plt.xlabel('Sorted Average Task Times')
plt.ylabel('Seconds')
plt.bar(range(1,len(myvalues)+1), myvalues)

plt.savefig("my_hist.png", format="png")
#+END_SRC


#+NAME: boxplot-test
#+BEGIN_SRC R :var mydata=TS-sort-mean-values :exports code :results none
png('my_boxplot_test.png')
#lmts <- range(x1,x2,y1,y2)
par(mfrow = c(1, 2))
boxplot(mydata, mydata, xlab="x") 
#+END_SRC

#+RESULTS: boxplot-test



* Overview


#+CAPTION: Overview of the input values, execution languages, and output values.
#+LABEL: tab:overview-values-languages
| *Input*                          | *Using* | *Output*             |
|----------------------------------+---------+----------------------|
| \texttt{refinding\_tagstore.csv} | shell   | TS task time values  |
| TS task time values              | Python  | TS avr. time values  |
| TS avr. time values              | shell   | TS sorted numbers    |
| \texttt{refinding\_folder.csv}   | shell   | F task time values   |
| F task time values               | Python  | F avr. time values   |
| F avr. time values               | shell   | F sorted numbers     |
| avr. time values TS + F          | R       | boxplot of times     |

To sum up the different data paths, we conclude in
Table \ref{tab:overview-values-languages} the different steps. We have
read in raw data from external \myacro{CSV} files and filtered them using
shell tools.

Then we processed the data using a Python program in
order to compute the average mean values of the times. Using the tool "sort"
we got the sorted list of mean values which were visualized using R
into boxplot graphs.

To summarize, the method of writing research papers within Org-mode
can simplify the writing process itself, lets the author choose the
most suitable tool for the next data processing step, create
additional value by having an easy to invoke data processing method,
and it illustrates the author's work in the most transparent way
possible.


* Limitations

For the purpose of this paper, the Org-mode \LaTeX{} export
preferences were adopted in order to meet the specifications of the
\myacro{ACM} paper template. To be future-proof, the authors used the
upcoming new \LaTeX{} exporter that will replace the current one. This
leads to following current limitations.

The normal Org-mode \LaTeX{} \myacro{PDF} export command has to be
replaced by the command for the enhanced \LaTeX{} \myacro{PDF}
export[fn:newexportcmd].

Usually, each Emacs user has Emacs configuration files that are
highly personalized. For generating the \myacro{PDF} export file
independent of the current user configuration, a stand-alone Emacs
configuration file was created. 

Having to adopt to the specifications to the \myacro{ACM} template
a number of settings had to be altered. There were still some issues
that could not be solved yet such as remaining \TeX{} lines for
~author-list~ and such. Those unnecessary lines have to be removed
from the \TeX{} file after the \LaTeX{} export and before the compile
process to generate the \myacro{PDF} file. All those steps are
encapsulated within a \myacro{GNU} make file. The single command line
sequence ~make all~ generates everything from the Org-mode file to the
final \myacro{PDF} file.

[fn:newexportcmd] ~org-e-latex-export-to-latex~

* Summary and Outlook

This paper demonstrates a new way of generating research papers
directly from the outlining tool Org-mode which is an enhancement of
the Emacs editor. The outlining file contains not only the text from
the paper but also all processing steps and scripts.  A method like
this allows reproducible research from the raw data files up to the
results generated without leaving any gap in between.

Since this method is relatively new and is using many customizations
for \myacro{ACM} template format, a few workarounds described in the
previous section were necessary. With future versions of Org-mode,
those workarounds will be minimized or removed totally.

\nocite{CHI2012}

\balancecolumns

\bibliographystyle{abbrv}
# change bibliography name to suit
\bibliography{references}  


* Instructions for use                                             :noexport:

This file provides a template for producing an ACM-SIG proceedings
article from an Org-mode file.  Many of the LaTeX commands defined by
the ACM-SIG class are generated on export by emacs-lisp source code
blocks that use content read from Org-mode tables.  Authors,
additional authors, terms, categories, and keywords are all handled
this way.  Citations and italicized words in section heads are both
handled with new Org-mode link types.

Detailed instructions on how to use this template follow.
  - Copy this file, preferably to an empty directory, and rename the
    file appropriately.
  - Ensure that the file =acm-proc-article-sp.cls= is either in the
    same directory as the copied and renamed file, or that it is
    installed somewhere your LaTeX installation can find.
  - Tangle the initialization files, by entering C-c C-v t with the
    cursor anywhere in this buffer.  This will tangle two
    files, =init-old.el= and =init-new.el=, one for the old exporter
    and one for the new exporter.
  - Generate the [[Configure%20makefile][Makefile]], by placing the cursor in the source code
    block and entering C-c C-c.  Depending on the values assigned to
    its variables, this code will generate a Makefile suited for the
    old exporter or the new exporter.
  - Add author, additional author, keyword, term, and categories
    information in the appropriate Org-mode tables.
  - Write an abstract in the empty =#+BEGIN_abstract
    ... #+END_abstract= block above.
  - Write the ACM-SIG paper as an Org-mode file.  First level
    headlines will be section heads, second level subsection heads, etc.
  - In a terminal, change to the project directory and run =make=.
    This will launch a new instance of emacs, initialize Org-mode,
    export this file and create a pdf file in ACM-SIG format.

* Setup                                                            :noexport:
** Initialization files
*** Initialization file for new exporter


This source code block tangles the initialization file that configures
the old Org-mode LaTeX exporter.

You might need to change this for your system:
   - Check =load-path= settings
   - Make sure the languages used in your source code blocks have been
     loaded with =org-babel-load-languages=

An org-entity, =\space=, has been added, which can be used after a
period that doesn't end a sentence, e.g., "Dr.\space Martin Luther King"

A link type, =cite=, is defined for citations.  See the text for how
to insert a citation.  Note that AucTeX and ebib can be configured to
insert the citation correctly.

A link type, =acm=, is defined to insert ACM-specific commands used to
italicize words in section headings.  See the text for examples of its
use. 

#+name: initialize-new-exporter
#+header: :tangle init-new.el
#+header: :results silent
#+header: :exports none
#+begin_src emacs-lisp 
  (add-to-list 'load-path "~/.emacs.d/org-mode/contrib/lisp") ;; <- adjust
  (add-to-list 'load-path "~/.emacs.d/org-mode/lisp") ;; <- adjust
  (add-to-list 'load-path "~/.emacs.d/org-mode") ;; <- adjust
  
  (require 'org-install)
  (require 'org-export)
  (require 'org-e-latex)
  
  ;; this line only required until the upcomming Org-mode/Emacs24 sync
  (load "~/.emacs.d/org-mode/lisp/org-exp-blocks.el")
  
  
  ;; Configure Babel to support all languages included in the manuscript
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (org        . t)))
  (setq org-confirm-babel-evaluate nil)
  (setq toggle-debug-on-error t)
  
  ;; Configure Org-mode
    (setq org-export-latex-hyperref-format "\\ref{%s}")
    (setq org-entities-user nil) 
    (add-to-list 'org-entities-user '("space" "\\ " nil " " " " " " " "))
    (setq org-e-latex-pdf-process '("texi2dvi --clean --verbose --batch %f"))
    (setq org-export-latex-packages-alist nil)
    (add-to-list 'org-export-latex-packages-alist '("" "hyperref"))
    (add-to-list 'org-export-latex-packages-alist '("" "graphicx"))

    (require 'org-special-blocks)
  
  (org-add-link-type 
     "cite" nil
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
               (format "\\cite{%s}" path)))))
  
  (org-add-link-type 
     "acm" nil
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
               (format "{\\%s{%s}}" path desc)))))
  
  (add-to-list 'org-e-latex-classes
                 '("acm-proc-article-sp"
                   "\\documentclass{acm_proc_article-sp}
                [NO-DEFAULT-PACKAGES]
                [PACKAGES]
                [EXTRA]"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

*** Initialization file for old exporter


This source code block tangles the initialization file that configures
the old Org-mode LaTeX exporter.

You might need to change this for your system:
   - Check =load-path= settings
   - Make sure the languages used in your source code blocks have been
     loaded with =org-babel-load-languages=

An org-entity, =\space=, has been added, which can be used after a
period that doesn't end a sentence, e.g., "Dr.\space Martin Luther King"

A link type, =cite=, is defined for citations.  See the text for how
to insert a citation.  Note that AucTeX and ebib can be configured to
insert the citation correctly.

A link type, =acm=, is defined to insert ACM-specific commands used to
italicize words in section headings.  See the text for examples of its
use. 

#+name: initialize-old-exporter
#+header: :tangle init-old.el
#+header: :results silent
#+header: :exports none
#+begin_src emacs-lisp 
  (add-to-list 'load-path "~/.emacs.d/src/org/lisp") ;; <- adjust
  (add-to-list 'load-path "~/.emacs.d/src/org") ;; <- adjust
  
  (require 'org-install)
  (require 'org-latex)
  
  ;; this line only required until the upcoming Org-mode/Emacs24 sync
  (load "~/.emacs.d/src/org/lisp/org-exp-blocks.el")
  
  
  ;; Configure Babel to support all languages included in the manuscript
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (org        . t)))
  (setq org-confirm-babel-evaluate nil)
  
  ;; Configure Org-mode
    (setq org-export-latex-hyperref-format "\\ref{%s}")
    (setq org-entities-user '(("space" "\\ " nil " " " " " " " ")))
    (setq org-latex-to-pdf-process '("texi2dvi --clean --verbose --batch %f"))
  
    (require 'org-special-blocks)
    (defun org-export-latex-no-toc (depth)  
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
    (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)
    (setq org-export-pdf-remove-logfiles nil)
  
  (org-add-link-type 
     "cite" nil
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
               (format "\\cite{%s}" path)))))
  
  (org-add-link-type 
     "acm" nil
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
               (format "{\\%s{%s}}" path desc)))))
  
  (add-to-list 'org-export-latex-classes
                 '("acm-proc-article-sp"
                   "\\documentclass{acm_proc_article-sp}
                [NO-DEFAULT-PACKAGES]
                [EXTRA]
                 \\usepackage{graphicx}
                 \\usepackage{hyperref}"
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

** Configure Makefile

Configure the Makefile by supplying the correct string for your emacs
application and the name of the initialization file.  Currently, this
is set up to use the old exporter.  It will need to be modified to run
the new exporter.

Once this is done, evaluate the code block with C-c C-c to create a
Makefile.  

#+name: configure-makefile
#+header: :file Makefile
#+header: :var emacs="/Applications/Emacs-23-4.app/Contents/MacOS/Emacs"
#+header: :var init-file="init-new.el"
#+header: :var exporter="new"
#+header: :eval noexport
#+BEGIN_SRC emacs-lisp
    (let ((f (file-name-sans-extension (file-name-nondirectory
                                        (buffer-file-name))))
          (g (if (string= exporter "old") "org-export-as-latex" "org-e-latex-export-to-latex")))
       (format "CC=gcc
    EMACS=%s
    BATCH_EMACS=$(EMACS) --batch -Q -l %s %s
    
    all: %s.pdf
    
    %s.tex: %s.org\n\t$(BATCH_EMACS) -f %s
    
    %s.pdf: %s.tex\n\trm -f %s.aux\n\tif pdflatex %s.tex </dev/null; then \\\n\t\ttrue; \\\n\telse \\\n\t\tstat=$$?; touch %s.pdf; exit $$stat; \\\n\tfi\n\tbibtex %s\n\twhile grep \"Rerun to get\" %s.log; do \\\n\t\tif pdflatex %s.tex </dev/null; then \\\n\t\t\ttrue; \\\n\t\telse \\\n\t\t\tstat=$$?; touch %s.pdf; exit $$stat; \\\n\t\tfi; \\\n\tdone
    
    %s.ps: %s.pdf\n\tpdf2ps %s.pdf
    
    clean:\n\trm -f *.aux *.log  *.dvi *.blg *.bbl *.toc *.tex *~ *.out %s.pdf *.xml *.lot *.lof
    " emacs init-file (file-name-nondirectory (buffer-file-name)) f f f g f f f f f f f f f f f f f))
#+END_SRC

#+RESULTS: configure-makefile
[[file:Makefile]]

* Content tables                                                   :noexport:
Fill the following tables.
** Author list
In this sample file, there are a *total* of EIGHT authors. SIX appear
on the 'first-page' (for formatting reasons) and the remaining two
appear in the \additionalauthors section.

The following table holds information about the author(s) of the
document.  You can separate groups of authors with a blank line to
change the layout.

#+name: authorlist
| author        | note | institute                         | addr1                         | addr2            | email                   |
|---------------+------+-----------------------------------+-------------------------------+------------------+-------------------------|
| Karl Voit     |      | Institute for Software Technology | Graz University of Technology | Austria          | Karl.Voit@IST.TUGraz.at |
| Thomas S. Dye |      | Thomas S. Dye \& Colleagues       | 735 Bishop St, Suite 315      | Honolulu, Hawaii | tsd@tsdye.com           |

#+name: additional-authors
| author            | institute                 | email                  |
|-------------------+---------------------------+------------------------|

** Category list

The following table holds information about ACM categories.

#+name: categories
| code  | description                      | category                       | optional        |
|-------+----------------------------------+--------------------------------+-----------------|
| I.7.1 | DOCUMENT AND TEXT PROCESSING     | Document and Text Editing      | Emacs           |
| I.7.1 | DOCUMENT AND TEXT PROCESSING     | Document Preparation           |                 |
| H.4.1 | INFORMATION SYSTEMS APPLICATIONS | Office Automation              | Word processing |
| I.7.4 | DOCUMENT AND TEXT PROCESSING     | Electronic Publishing          |                 |
| D.2.3 | SOFTWARE ENGINEERING             | Coding Tools and Techniques    |                 |
| D.4.9 | OPERATING SYSTEMS                | Systems Programs and Utilities |                 |
| E.2   | DATA STORAGE REPRESENTATIONS     | Linked representations         |                 |

** Term list

This table is used as input to =list-to-cs-string= with the =theory= command.

#+name: term-list
| Term                  |
|-----------------------|

** Keyword list

This table is used as input to =list-to-cs-string= with the =keyword= command.

#+name: keyword-list
| Keyword               |
|-----------------------|
| Open Science          |
| Reproducible Research |
| Org-mode              |
| Emacs                 |
| Tools                 |

* Source code                                                      :noexport:
You shouldn't need to alter anything here.
** General purpose lists

This source code block takes a one-column table and a command name and
outputs a LaTeX code block with the table contents as a comma
separated list wrapped by the command.

#+name: list-to-cs-string
#+header: :var in-list=term-list
#+header: :eval noexport
#+header: :var in-command="terms"
#+header: :results latex 
#+header: :exports results
#+BEGIN_SRC emacs-lisp
(defun list-to-comma (the-list)
  (let (
        (return-string "")
        )
    (while (> (length the-list) 0)
      (if (> (length return-string) 0)
          (setq return-string (concat return-string ", " (car (car the-list))))
        (setq return-string (car (car the-list)))  ;; else
        )
      (setq the-list (cdr the-list))
      ) ;; end of "while"
    return-string
    ) ;; end of "let"
    )
(let (
    (a (cdr (cdr in-list)))
)
(concat (format "\\%s{" in-command) (list-to-comma a) "}")
)
#+END_SRC

#+RESULTS: list-to-cs-string
#+BEGIN_LaTeX
\terms{Theory}
#+END_LaTeX

